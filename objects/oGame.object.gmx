<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>parent_dont_pause</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    // Init Global variables
// For developer eyes only
global.debug = 1;
// delta Time for handling lag 
global.delta = 1;   //deltaTime = room_speed/50 ;

// slows or speeds up time for all movable instances
global.timeMultiplier = 1;

//debug_SelectedObj = noone;
debug_SelectedLightObj = noone;

    // Pause
//The "paused" variable is used later to check if the game is paused or not.
//"pause_BG" will contain the "screenshot" of the game that is created when you pause.
paused = false;
pause_BG = -1;


Q = 0;      // priority queue for timestamps    unit id = value, timestamp[x] = priority
L = 0;      // list of active units
T_size = 11;
T = 0;      // Turn Order List - do not sort -
            // takes ids of Q in order from smallest -&gt; largest. 
            // Smallest timestamps goes first
turnCount = 0;
curActor = noone;
curActorCount = 1;

// Create oLight and oAstar if they aren't created
if (!instance_exists(oLight)){
    instance_create(0,0,oLight);
}
if (!instance_exists(oAstar)){
    instance_create(0,0, oAstar);
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == rm_gameStart){
    room_goto_next();
}
/*
var reg = oAstar.blockSize *4;
instance_activate_all();
instance_deactivate_region(view_xview[0] - reg, view_yview - reg, view_wview[0] + reg, view_hview + reg, false, true); //deactiveate all outside view with a 64 border
// objects that shouldn't be deactivated
instance_activate_object(oCamera);
//instance_activate_object(oSolid);
instance_activate_object(oLight); 
instance_activate_object(oAstar); 
instance_activate_object(oAstar.curActor);
for(var n=0;n&lt; array_length_1d(oAstar.path); n++){
    instance_activate_object(oAstar.path[n]);
}
*/


// TODO: implement Alarm
scr_manageTurns();

/*
ds_list_clear(L);
// Update L - List of Units 
for (var c = 0; c &lt; instance_count; c++){
    //if (object_get_parent(instance_id[c].object_index) == oActor){
    if (object_is_ancestor(instance_id[c].object_index, oActor)){
        if (instance_id[c].active == true){
            ds_list_add(L, instance_id[c]);
        }
    }
}

*/












</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.delta = (60/1000000)*delta_time;

    // Spawning Instances
if (instance_exists(oCamera)){
        view_object[0]  = oCamera; //set object to follow
}
// TODO: if more than one camera delete and leave only one

if (!instance_exists(oAstar)){
    instance_create(0,0, oAstar);
}


    // Keyboard Input

// Toggle Debug Mode
if (keyboard_check_pressed(vk_lalt)){
    global.debug = (global.debug+1) mod 2;
}
// Restart Game
if (keyboard_check_pressed(ord('R'))){
    game_restart();
}
// Exit Game
if (keyboard_check_pressed(vk_escape)){
    game_end();
}
// Toggle pause
if (keyboard_check_pressed(vk_space)){
    if(game_is_paused()) {
        game_resume();
    } else {
        game_pause();
    }
}
//the image_index code below is optional, it's to change the sprite of the pause button.
//image_index = game_is_paused();


// Alter time for all instances
var numTime = 0.01;
if (keyboard_check(vk_lshift)){
    global.timeMultiplier -= numTime;
}
else if (keyboard_check(vk_rshift)){
    global.timeMultiplier += numTime;
}

// select a light object to manipulate in debug mode
if (global.debug &amp;&amp; mouse_check_button_pressed(mb_middle)){
    debug_SelectedLightObj = instance_position(window_view_mouse_get_x(0), window_view_mouse_get_y(0), oAncestor_Light)

}    

// Specific Object Code

// Control Camera
if (instance_exists(oCamera)){
    with (oCamera){
        // Zoom In Camera
        if (keyboard_check_pressed(187)){
            targetZoomPercent = clamp(targetZoomPercent + zoomStep, minZoom, maxZoom);
        }
        // Zoom Out Camera
        if (keyboard_check_pressed(189)){
            targetZoomPercent = clamp(targetZoomPercent - zoomStep, minZoom, maxZoom);
        }
    }
}

// Control curActor
if (curActor != noone){
    // end current Actor's turn
    if(keyboard_check_released(ord('Y'))){
        curActor.endTurn = true;
    }
        
    // alternate palette colors
    if (keyboard_check_pressed(219)) // '['
        curActor.current_pal++;
    if (keyboard_check_pressed(221)) // ']'
        curActor.current_pal--;
}

/*
// Control Actor
if (instance_exists(oActor)){
    with (oActor){   
     }
}
*/

/*
// Alternate between current Actors
if (keyboard_check_pressed(ord('Y'))){
    curActorCount = (curActorCount+1) mod 4  
}

if (curActorCount == 0 &amp;&amp; instance_exists(oEnemy1))
    curActor = oEnemy1;
else if (curActorCount == 1 &amp;&amp; instance_exists(oEnemy2))
    curActor = oEnemy2;
else if (curActorCount == 2 &amp;&amp; instance_exists(oEnemy3))
    curActor = oEnemy3;
else if (curActorCount == 3 &amp;&amp; instance_exists(oEnemy3))
    curActor = oEnemy4;
*/




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Create oLight and oAstar if they aren't created
if (!instance_exists(oLight)){
    instance_create(0,0,oLight);
}
if (!instance_exists(oAstar)){
    instance_create(0,0, oAstar);
}
if (!instance_exists(oCamera)){
    instance_create(0,0, oCamera);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

// init Palette Swapping System
pal_swap_init_system(shd_pal_swapper);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw the pause background.
if(background_exists(pause_BG)) {
    draw_background(pause_BG,0,0);
}
draw_set_colour(c_white);




if (global.debug){
    // Current Actor Info
    if (curActor != noone){
        draw_text(room_width - 200, 48, "CurActor: " +string(curActor));
        draw_text(room_width - 400, 64, "CurActor_hspd: " +string(curActor.hspd));
        draw_text(room_width - 400, 80, "CurActor_vspd: " +string(curActor.vspd));
    }
    
    // Game FPS
    draw_text(room_width - 400, 00, "Debug: " +string(global.debug))
    draw_text(room_width - 400, 16, "FPS  :   " + string(fps_real));
    draw_text(room_width - 400, 32, "Delta: " + string(global.delta));
    // Game FPS /end


    // Camera Checks
    if (instance_exists(oCamera)){
        draw_text(0, room_height - 256, "Zoom: " +string(oCamera.zoomPercent) + "%")
        draw_text(0, room_height - 224, "InitZoomX: " +string(oCamera.initZoomWidth));
        draw_text(0, room_height - 208, "targetZoom: " +string(oCamera.targetZoomPercent));
        draw_text(0, room_height - 192, "lastkey: " +string(keyboard_lastkey))
        draw_text(0, room_height - 176, "lastmb: " +string(mouse_lastbutton))
    }    
    // Camera Checks /end

    
    
    // Platforming Checks
    if (instance_exists(oAstar)){
        //draw_text(0,1, "Alarm: " + string(oAstar.alarm[0]))
        if (curActor != noone &amp;&amp; !game_is_paused()){
            draw_text(200,64, oAstar.endNodeOffset);
            draw_text(200,80, oAstar.tempEndNodeOffset);
            draw_text(room_width - 200, 0, "Motion X: " + string(oAstar.motionX));
            draw_text(room_width - 200, 16, "Motion Y: " + string(oAstar.motionY));
            
            draw_text(room_width - 200, 32, "FallHeight: " + string(oAstar.fallHeight));
            //draw_text(room_width - 200, 48, "CurActor: " +string(oAstar.curActor));
            
            if (ds_exists(oAstar.nodeList, ds_type_list))
                draw_text(room_width - 200, 64, "NodeList Amount: " +string(ds_list_size(oAstar.nodeList)));
            
            draw_text(room_width - 200, 80, "DataBin R: " +string(array_length_2d(oAstar.dataBinR, 0)));
            draw_text(room_width - 200, 96, "DataBin J: " +string(array_length_2d(oAstar.dataBinJ, 0)));
            
            draw_text(room_width - 200, 112, "startNode: " +string(oAstar.startNode))
            draw_text(room_width - 200, 128, "  endNode: " +string(oAstar.endNode))
            
            
        
            /**/
                // Print dataBins
            // draw Runoff DataPoints
            for(var b=0;b&lt;array_length_2d(oAstar.dataBinR, 0);b++){
                draw_text_transformed(0,b * 16, string(oAstar.dataBinR[0,b]) + ' / ' + string(oAstar.dataBinR[1,b]),.75,.75,0)
            }
            // draw Jump FataPoints
            for(var d=0;d&lt;array_length_2d(oAstar.dataBinJ, 0);d++){
                draw_text_transformed(64,d * 16, string(oAstar.dataBinJ[0,d]) + ' / ' + string(oAstar.dataBinJ[1,d]),.75,.75,0)
            }
        }
    }
    // Platforming Checks /end
    
    
    
    
}

// Turn Order Checks
var debug_x = room_width -200; 
/*
if (ds_exists(T, ds_type_list)){
    // Draw turnOrder list size
    draw_text(debug_x, 125, "TurnOrder Size: " + string(ds_list_size(T)))
    // Draw TurnOrder List with actor names listed below
    draw_text(20, 50, "TurnOrder List:")
    draw_line_width(15,68,200, 68, 2);
    
    if (ds_list_size(T) != 0){
        for (var o = 0; o &lt; 10;o++){  //for (var o = 0; o &lt; ds_list_size(T);o++){
            // Draw all names of Actors inside the turnOrder list
            clamp(o, 0, 10);
            draw_text(20, 75 + (25 * o), 
            //object_get_name((ds_list_find_value(T, o)).object_index));    
            ds_list_find_value(T, o).name);    
        }
    }
}

// Draw the number of Actors present
var actorCount = 0;
for (var i = 0; i&lt;instance_count;i++){
    if (object_get_parent(instance_id[i].object_index) == oActor){
        actorCount++;
    }
}
draw_text(debug_x, 75, "Actor Count = " + string(actorCount));


// show timestamps for all actors
with (oActor){
    draw_text(x,y-32, string(wt));
    
    for(var t=0; t&lt;array_length_1d(timestamps)-1;t++)
        draw_text(x ,y-80-(16 * t), string(timestamps[t]));
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
