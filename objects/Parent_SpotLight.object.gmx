<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sSpotLens</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>oAncestor_Light</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Init SpotLight Parent
event_inherited();

active = 1;   
lightCol = make_color_rgb(255, 0, 0);
intensity = 1;
//lightSwitch = 101; // 'keypad 5'


// Spot Light specific Variables
lightDistance = 1200;
lightRotation = 0;  
lightCutoff = 0.2; //0.31

rotSpd = 0; // rotation speed
isRotating = false;

// scaling of the object
scaleX = 0; 
scaleY = 0;

// light's origin point in the game window
lightOriginX = 0;
lightOriginY = 0;

// light's origin point relative to sprite_index (0,0 -&gt; sprite width, sprite height)
sprLightOriginX = sprite_get_xoffset(sprite_index);
sprLightOriginY = sprite_get_yoffset(sprite_index); 

/* offsets that combine with origin to make a target point. 
    xrot &amp; yrot use sin and cos so target is in a cicular path around origin.
    The origin points to the target point,
    causing Rotation of the spotlight */
xrot = 0;
yrot = 0;






/*  rotIncr needs to be in step. Needs the current rotation value
    Keep the equation here for safe keeping in case you fuck up
    -   rotIncr = 0.01753*rotation-1.65;
*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (rotSpd != 0)
    isRotating = true;
else
    isRotating = false;

lightRotation = (lightRotation + rotSpd) mod 360;

// .0176 is the old choice .01753 is current and more precise.
// Could be tuned some more tho
//rotIncr = 0.01753*rotation-1.65;
rotIncr = 0.01753*(lightRotation+image_angle+90)-1.65;

// sets light target's x and y. Points the light in the right direction.
xrot = 2 * cos (rotIncr);
yrot = 2 * sin (rotIncr);


// keep track of scale so light can be in correct position
scaleX = sprite_width / sprite_get_width(sprite_index);
scaleY = sprite_height / sprite_get_height(sprite_index);

// Locate the light's origin point, relative to x and y pos
lightOriginX = 
x - ((sprite_get_xoffset(sprite_index) - sprLightOriginX) * scaleX );

lightOriginY = 
y - ((sprite_get_yoffset(sprite_index) - sprLightOriginY) * scaleY );




// show light if active
if (active){ 
    // return light_id in realtime using SearchForLightId() 
    // so objects don't choose the same slot and only one shows up
    NM_set_SpotLight(SearchForLightId(), lightOriginX, lightOriginY, lightCol, intensity, 
        lightDistance, lightOriginX+ xrot, lightOriginY - yrot, lightCutoff);
              
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
/*
draw_text(room_width - 196, room_height - 96,"Rotation:" + string(rotation))

// draw xrot and yrot
draw_text(room_width - 164, room_height - 64,"Xrot:" + string(xrot div 45))
draw_text(room_width - 164, room_height - 32,"Yrot:" + string(yrot div 45))


*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
