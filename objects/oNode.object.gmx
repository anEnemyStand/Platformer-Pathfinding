<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sNode</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init for Node

// Node Struct variables

image_speed = 0;
blockSizeX = 0;
blockSizeY = 0;
/*  expand our Node structure to be more flexible and 
    account for agents of differing heights     */
// how much space above this tile do we have
    clearance = 0;
// what type of Node this is
    type = -1;    // default is walkway and changes later
    isNodeAnalyzed = 0;

    data = 0;
    edges[0,0] = noone;
    edges[1,0] = noone;
    
    leftNode = noone;
    rightNode = noone;
    
    targetNode = noone;
    
    // higher weight = less likely
    // lower weight = more likely
    // aims for the least weight/ similar to G score
    //weight = 0; // preference when choosing a path
    
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//get clearance number for this node

blockSizeX=x div oAstar.blockSize;//x/y=2.25 x div y=2 floor(x/y);
blockSizeY=y div oAstar.blockSize;

    // Change color of node according to type
switch (type){
    case NodeType.Walkway:
        image_index = 0;
        break;
    case NodeType.LedgeRight:
    case NodeType.LedgeLeft:
        image_index = 1;
        break;
    case NodeType.LedgeBoth:
        image_index = 2;
        break;
    /*
    case NodeType.DownOneWay:
        image_index = 3;
        break;
    */
}

// Get Node Type

// gather some data about the surrounding tiles


/*
var belowRightPassable = oAstar.walkable[ min(blockSizeX + 1, oAstar.fieldWidth-1) , min(blockSizeY + 1, oAstar.fieldHeight-1) ]
var belowLeftPassable = oAstar.walkable[ max(blockSizeX - 1, 0) , min(blockSizeY + 1, oAstar.fieldHeight-1) ]
var rightPassable = oAstar.walkable[ min(blockSizeX + 1, oAstar.fieldWidth-1) , blockSizeY ]
var leftPassable = oAstar.walkable[ max(blockSizeX - 1, 0) , blockSizeY ]
*/

// TODO: Update this after each turn instead of all of time
 
if (!isNodeAnalyzed){
        // Nodes that are not on the edges of the room
    if ((blockSizeX &gt; 0 &amp;&amp; blockSizeX &lt; oAstar.fieldWidth-1) &amp;&amp; 
        (blockSizeY &gt; 0 &amp;&amp; blockSizeY &lt; oAstar.fieldHeight-1)){
            var belowRightPassable = instance_place(x+oAstar.blockSize,y-oAstar.blockSize,oSolid)
            var belowLeftPassable = instance_place(x-oAstar.blockSize,y-oAstar.blockSize,oSolid)
            var rightPassable = instance_place(x+oAstar.blockSize,y,oNode)
            var leftPassable = instance_place(x-oAstar.blockSize,y,oNode)
        // if we have no passable tiles below right/left AND passable tiles right/left this is a walkway
        if( ( !belowRightPassable &amp;&amp; !belowLeftPassable ) &amp;&amp; ( rightPassable &amp;&amp; leftPassable ) )
            type = NodeType.Walkway;
        
        //else if( !belowLeftPassable &amp;&amp; leftPassable &amp;&amp; belowRightPassable &amp;&amp; !rightPassable)
        else if( !belowLeftPassable &amp;&amp; leftPassable &amp;&amp; !rightPassable)
            type = NodeType.LedgeRight;
        
        //else if( !belowRightPassable &amp;&amp; rightPassable &amp;&amp; belowLeftPassable &amp;&amp; !leftPassable)     
        else if( !belowRightPassable &amp;&amp; rightPassable &amp;&amp; !leftPassable)
            type = NodeType.LedgeLeft;
        
        else if( !belowRightPassable &amp;&amp; !belowLeftPassable &amp;&amp; !rightPassable &amp;&amp; !leftPassable )
            type = NodeType.LedgeBoth;
        /*    
        else if (instance_place(x,y+oAstar.blockSize,oOneWayPlatform))
            type = NodeType.DownOneWay;
        
        
        else 
            type = NodeType.Walkway;
        */
    }




    // For each Node, add adjacent nodes to their own edges array list
        leftNode = noone;
        rightNode = noone;
        //var c = clearance * oAstar.blockSize;
        var r = 0
        var l = 0
        
        leftNode = instance_place(x - oAstar.blockSize, y, oNode)
        for (var q=0; q &lt; array_length_2d(edges,0); q++){
            if(edges[0,q] == leftNode)
                l = 1
        }
        if (l != 1 &amp;&amp; leftNode != noone &amp;&amp; clearance &gt;= oAstar.agentHeight)
            // add leftNode to edges list
            if (array_length_2d(edges,0) == 1 &amp;&amp; edges[0,0] == noone){
                edges[0,0] = leftNode;
                edges[1,0] = 'EdgeType.Platform';
            }
            else{
                edges[0, array_length_2d(edges,0)] = leftNode;
                edges[1,array_length_2d(edges,0)-1] = 'EdgeType.Platform'
            }
        // ------
        
        rightNode = instance_place(x + oAstar.blockSize, y, oNode)
        for (var w=0; w &lt; array_length_2d(edges,0); w++){
            if(edges[0, w] == rightNode)
                r = 1
        }
        if (r != 1 &amp;&amp; rightNode != noone &amp;&amp; clearance &gt;= oAstar.agentHeight)
            // add leftNode to edges list
            if (array_length_2d(edges,0) == 1 &amp;&amp; edges[0,0] == noone){
                edges[0,0] = rightNode;
                edges[1,0] = 'EdgeType.Platform';
            }
            else{
                edges[0, array_length_2d(edges,0)] = rightNode;
                edges[1,array_length_2d(edges,0)-1] = 'EdgeType.Platform'   
            }
            
    isNodeAnalyzed = 1;
}    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw connections and shit

// original ------
/*
draw_text_transformed(x+9,y+23, string(clearance), 0.75, 0.75, 0)
if (rightNode != noone)
draw_line_width_colour(x+16, y+20, rightNode.x + 8, rightNode.y + 20, 2, c_purple,c_purple)
if (leftNode != noone)
draw_line_width_colour(x+16, y+12, leftNode.x + 24, leftNode.y + 12, 2, c_orange,c_orange)
*/
if (global.debug){
    // edited ---------
    /**/
    for (var e=0; e&lt; array_length_2d(edges,0); e++){
        if (edges[0,e] != noone)
            if (edges[1,e] == 'EdgeType.Platform')
            draw_line_width_colour(x, y, edges[0,e].x, edges[0,e].y, 2, c_purple,c_purple)
    }
    
    for (var b=0; b&lt; array_length_2d(edges,1); b++){
        if (edges[1,b] != 'EdgeType.Platform')
            draw_text_transformed(x, y-48 + (b*16), string(edges[0,b]) + "  /  " + 
            string(edges[1,b]) ,0.5,0.5,0)
        
    }
     
    //*    Draw Connections -----------------
    
    // Runoff Connections
    for (var r=0; r &lt; array_length_2d(edges,1); r++)
        if(edges[0,r] != noone &amp;&amp; edges[1,r] == 'EdgeType.RunOff'){
            if (y + oAstar.blockSize != edges[0,r].y &amp;&amp; 
                (x + oAstar.blockSize != edges[0,r].x || x - oAstar.blockSize != edges[0,r].x)){
            draw_line_width_colour(x, y, edges[0,r].x, edges[0,r].y, 2, c_orange,c_orange)
            }
        }
    // Jump Connections
    for (var j=0; j &lt; array_length_2d(edges,1); j++)
        if(edges[0,j] != noone &amp;&amp; edges[1,j] == 'EdgeType.Jump')
            draw_line_width_colour(x, y, edges[0,j].x, edges[0,j].y, 2, c_blue,c_blue)
    
    // StepUp Connections
    for (var s=0; s &lt; array_length_2d(edges,1); s++)
        if(edges[0,s] != noone &amp;&amp; edges[1,s] == 'EdgeType.StepUp')
            draw_line_width_colour(x, y, edges[0,s].x, edges[0,s].y, 2, c_red,c_red)
    
    
            
            
    // Show connected edges
    if (array_length_2d(edges,0) == 1 &amp;&amp; edges[0,0] == noone)
        draw_text_transformed(x+24, y, "null", 0.75, 0.75, 0);
    else
        draw_text_transformed(x+24, y, string(array_length_2d(edges,0)), 0.75, 0.75, 0);
    //*/
   
 
    draw_self();
} 




</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
