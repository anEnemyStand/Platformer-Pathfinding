<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sRider</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Link Normal and Specular Maps to Object

desiredMap = sprite_index;
// X and Y scaling
sX = 0
sY = 0
// Assign object's norm and spec maps based on naming convention
//  spriteName          -diffuse map
//  spriteName_norm     -normal map
//  spriteName_spec     -specular map

normMap = 
    asset_get_index(sprite_get_name(sprite_index)+ "_norm");
specMap = 
    asset_get_index(sprite_get_name(sprite_index)+ "_spec");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add texture

if (desiredMap != sprite_index){
    normMap = 
        asset_get_index(desiredMap + "_norm");
    specMap = 
        asset_get_index(desiredMap + "_spec");
}

// use the normal map since it is so common. Spec map uses same dimensions anyway
sX = sprite_width / sprite_get_width(normMap);
sY = sprite_height / sprite_get_height(normMap);

//Add diffuse texture to the diffuse map
NM_diffuse(1)
    draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,-1,1)
NM_diffuse(0)

// Check if object has a norm and spec map before drawing

if (normMap){
    //Add normal texture to the normal map
    NM_normal(1,image_angle)//Rotated to image_angle
    draw_sprite_ext(normMap,image_index,x,y,sX,sY,image_angle,-1,1)
    NM_normal(0,0)
}

if (specMap){
    //Add specular texture to the specular map
    NM_specular(1)
    draw_sprite_ext(specMap,image_index,x,y,sX,xY,image_angle,-1,1)
    NM_specular(0)
}



//draw_self();

/**/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
