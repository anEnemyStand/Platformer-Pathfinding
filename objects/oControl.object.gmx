<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()   //step counter inheritance/ built in alarms
pal_swap_init_system(shd_pal_swapper);

DEBUG = true;

event = Event.overworld

Q = 0;
L = 0;
T = 0;
T_size = 10;

turnCount = 0;
curActor = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Switch room and event



//event == Event.overworld

if (event == Event.encounter || event == Event.overworld){
    event = Event.battle;
    if (room == rm_field){
    room = rm_stage;
    step = -1;
}
}else if (event == Event.endBattle){
    event = Event.overworld
    if (room == rm_stage){
    room = rm_field;
    step = -1;
}    
}



/*
if (room == rm_field){
    room = rm_stage;
    step = -1;
}
else if (room == rm_stage){
    room = rm_field;
    step = -1;
}    

step = -1;
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//script always open / type of step triggers different alarms
// -1 is default for no activity; 

//window_set_caption('FPS: '+string(fps));

/*

scr_spawn();    // spawns units depending on location

//--------------------------------------------
switch(event)
{
    case Event.overworld:
        scr_control_overworld();
        break;
    
    case Event.encounter:
        scr_control_encounter();
        break;
        
    case Event.battle:
        scr_control_battle();
        break;

    case Event.endBattle:
        scr_control_endBattle();
        break;
}



if (keyboard_check_pressed(ord('R'))){
    game_restart();
}
if (keyboard_check_pressed(vk_escape)){
    game_end();
}

*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Randomize seed
//randomize();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the turn order
/*

if (DEBUG){ 
var debug_x = room_width -200; 
    // Draw current Event State  
        draw_text(debug_x, 50, "Event: ");
    if (event == Event.overworld)
        draw_text(debug_x + 65, 50, "Overworld");  //135
    else if (event == Event.encounter)
        draw_text(debug_x + 65, 50, "Encounter");
    else if (event == Event.battle)
        draw_text(debug_x + 65, 50, "Battle");
    else if (event == Event.endBattle)
        draw_text(debug_x + 65, 50, "End Battle");
        
    // Draw the number of Actors present
    var actorCount = 0;
    for (var i = 0; i&lt;instance_count;i++){
        if (object_get_parent(instance_id[i].object_index) == oActor){
            actorCount++;
        }
    }
    draw_text(debug_x, 75, "Actor Count = " + string(actorCount));
            
    // Draw name of current Actor whose turn it is      
    if (curActor != noone)
        draw_text(debug_x, 100, "curActor = " + string(curActor.name));
    
    // Draw alarm value
    draw_text(debug_x, 200, "Alarm: " + string(alarm[0]));
   
    //******************************************************************
           
    // if in battle
    if (event == Event.battle){
        if (ds_exists(T, ds_type_list)){
            // Draw turnOrder list size
            draw_text(debug_x, 125, "TurnOrder Size: " + string(ds_list_size(T)))
            // Draw TurnOrder List with actor names listed below
            draw_text(20, 50, "TurnOrder List:")
            draw_line_width(15,68,200, 68, 2);
            
            if (ds_list_size(T) != 0){
                for (var o = 0; o &lt; ds_list_size(T);o++){
                    // Draw all names of Actors inside the turnOrder list
                    clamp(o, 0, 10);
                    draw_text(20, 75 + (25 * o), 
                    string(ds_list_find_value(T, o)).name);    
                }
            }
        }
    }
    
}
        
/*  Abandoned - Useable template/base for a later~ for loop
draw_text(debug_x, 225, "Used Offsets: ")
if (array_length_1d(used_offsets) != 0){
    for (var u = 0; u &lt; array_length_1d(used_offsets); u++)
        draw_text(debug_x + 50, 225 + (u * 25) , string(used_offsets[u]));
}
*.
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
