<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Parent_LitSurface</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
// determines whether light is on/off
active = 1;     

// color of light (rgb or hsv)
lightCol = make_color_rgb(255, 255, 255);

// strength of light hitting surfaces
intensity = 1;

// key that can switch the light on/off
lightSwitch = 96; // numpad 0

// id number &gt;= 0, needed to display light onscreen
light_id = -1; 

// only when light id is found can the light display onscreen
lightIdFound = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = active;


if (id == oGame.debug_SelectedLightObj){
    
    // switch to turn light on and off
    if (keyboard_check_pressed(lightSwitch)){
        active = !active;
    }
    
    // control movement
    // up
    if (keyboard_check(101))        // numpad 5
        y-=5;
    // down
    else if (keyboard_check(98))    // numpad 2
        y+=5;
    
    // left
    if (keyboard_check(97))         // numpad 1
        x-=5;
    // right
    else if (keyboard_check(99))    // numpad 3
        x+=5;
    
    // control intensity
    if (keyboard_check(100))        // numpad 4
        intensity = max(intensity - 0.03, 0.0);
    else if (keyboard_check(102))   // numpad 6 
        intensity = min(intensity + 0.03, 1.0);
    
    // control rotation
    if (keyboard_check(103))        // numpad 7 
        image_angle -= 2;
    else if (keyboard_check(105))
        image_angle += 2;           // numpad 9 
    
    // control light hue
    if (keyboard_check(107)){
        lightCol = make_colour_hsv((colour_get_hue(lightCol)+1), 255, 255);
    }
    if (keyboard_check(109)){
        lightCol = make_colour_hsv((colour_get_hue(lightCol)-1), 255, 255);
    }
        
    
}


// deletes light data using light_id, when light is no longer active
if (!active){

    if(light_id != -1){
        // reset light array indexes that the object was holding back to -1
        DeleteLight(light_id);
    }
    light_id = -1
    lightIdFound = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
