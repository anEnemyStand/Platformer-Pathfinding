<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize 
height = sprite_height;
width  = sprite_width;
image_speed = 0.15;

// movement
spd = 4;
jspd = 12;
hspd = 0; 
vspd = 0;
dir = 1;
fric = 2;
run_multiplier = 2
airborne = 0;


maxFallHeight =  4;
maxFallSpeed = 10;    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//maxFallHeight = 5;


var rkey = keyboard_check(ord('D'));    //right
var lkey = keyboard_check(ord('A'));    //left
var jkey = keyboard_check_pressed(ord('W'));    //jump
var ckey = keyboard_check(ord('S'));    //crouch
var shift = keyboard_check(vk_space);

 image_blend = -1;
//Check for ground
if (place_meeting(x, y+1, oSolid)) 
{
    vspd = 0;
    
    // Crouching -------------------------------
    if (ckey) 
    {
        lkey = false;
        rkey = false;
        
        while (hspd &gt; 0)    //moving right
            hspd -= fric;
        while (hspd &lt; 0)
            hspd +=fric;
        
        if (hspd == 0)   
            image_blend = c_fuchsia;
        if (jkey)
            ckey = false;   
    }   // End-Crouching -------------------------------
    
    
    // Jumping -------------------------------
    if (jkey) {
        vspd = - jspd// + hspd * dir;
        hspd = hspd;
        //hspd = hspd * dir
       
           // do { hspd = hspd * 5 } 
            //    until ( place_meeting(x, y+1, oSolid) )
        
    }
} 
else {
    // Gravity
    if (vspd &lt; maxFallSpeed) //10  // higher = heavier
    {
        vspd += oAstar.grav;
    
        /*if (airborne)
        {
            temp_grav = oAstar.grav/30;
            vspd += temp_grav;
        }
        */
    }
    //if (keyboard_check_released(ord('W')) &amp;&amp; vspd &lt; -4) {
        //vspd = -4;
   // }
    
   /* if (place_meeting(x + dir, y , oSolid) &amp;&amp;  == 0 &amp;&amp; vspd &gt;= 0)
    {
        if (halt == 1)
        {
            vspd = 0;
            dir *= -1;
            halt = 0;
        }
        //while (!place_meeting(x + dir * -1, y, oSolid))
            vspd += oAstar.grav/2.5;
        
        if (jkey) {
            vspd =- jspd;
            
}
    }    
    else if (vspd &lt; 35)  // higher = heavier
    {
        vspd += oAstar.grav;
    }*/
    
}

if (shift &amp;&amp; jkey)//! airborne) )
        {
           if (place_meeting(x, y+1, oSolid) &amp;&amp; hspd &gt;= spd + (run_multiplier/1.5))
           {
                airborne = 1; 
                
           }
        }
if (airborne)
{
    image_blend = c_purple
    //vspd = -jspd/1.2;
    hspd = hspd + run_multiplier;
    if (lkey)
        hspd -= spd;
    if(rkey)
        hspd += spd;
    if (place_meeting(x, y+1, oSolid) || place_meeting(x+1, y, oSolid) || place_meeting(x-1, y, oSolid))
        airborne =0;
}


if (rkey)
{
    if (hspd &lt; spd) {
        hspd += fric;
    } else {
        // Fast Run
        if (shift)
        {
            hspd = spd * run_multiplier;
            if (jkey)
                airborne = 1;
        }
        else 
            hspd = spd;
    }
    dir = 1;

   // Left Wall jump
    if (place_meeting(x-1, y, oSolid) &amp;&amp; !place_meeting(x, y+1, oSolid) &amp;&amp; !lkey)
    {
        image_blend = c_green;
        vspd = 0;
        while (!place_meeting(x + dir * -1, y, oSolid))
            vspd += oAstar.grav/3; 
            vspd =- jspd;
    }   
    /*
     Left Wall jump
    if (place_meeting(x-1, y, oSolid) &amp;&amp; !place_meeting(x, y+1, oSolid))
    {
        image_blend = c_yellow;
        vspd = 0;
        if (jkey)
            vspd += oAstar.grav/2.5; 
            vspd =- jspd;
    }  
    */
}

// Moving Left
if (lkey)
{
    
    if (hspd &gt; -spd)
    {
        hspd -= fric;
    } else {
        // Fast Run
        if (shift &amp;&amp; place_meeting(x, y+1, oSolid))
        { 
            hspd = - spd * run_multiplier;
            if (jkey)
            {
                vspd = - jspd // * 1.2;
                //hspd += hspd * 4;
            }
        }
        else 
            hspd = - spd;
    }
    
    dir = -1;
    
    // Right Wall jump
    if (place_meeting(x+1, y, oSolid) &amp;&amp; !place_meeting(x, y+1, oSolid) &amp;&amp; !rkey)
        {
            vspd += oAstar.grav/2.5; 
            vspd =- jspd;
        }   
}

// Check for not moving
if ( (!rkey &amp;&amp; !lkey) || (rkey &amp;&amp; lkey) ) 
{  
            hspd = 0;    
}
/*
// Added Friction - Check for not moving
if ( (!rkey &amp;&amp; !lkey) || (rkey &amp;&amp; lkey) ) 
{
    if (hspd != 0) {
        if (hspd &lt; 0) {
            hspd += fric;
        } else {
            hspd -= fric;
        }
    }
}
*/


scr_collision();

// Move Horizontally
x += hspd;

// Move Vertically
y += vspd;











</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
