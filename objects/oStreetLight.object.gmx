<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Pole_Light</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Init SpotLight Parent


active = 1;     // light on or off
rotation = 0;     // direction of light

intensity = 1.0;

light_id = -1;   // hold the light index for deleting later and such
lightCol = make_color_hsv(40, 255, 255);
lightCutoff = 0.2; //0.31
lightDistance = 1200;


lightSwitch = 'Z';  // default light switch key

lightIdFound = 0;

xrot = 0;
yrot = 0;

rotSpd = 0;
isRotating = 0;





/*  rotIncr needs to be in step. Needs the current rotation value
    Keep the equation here for safe keeping in case you fuck up
    -   rotIncr = 0.01753*rotation-1.65;
*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = active;
image_xscale = 5;
image_yscale = 5;

if (rotSpd != 0)
    isRotating = true;

if (isRotating){
    rotation = (rotation + rotSpd) mod 360;
    image_angle = rotation;
}
// .0176 is the old choice .01753 is current and more precise.
// Could be tuned some more tho
//rotIncr = 0.01753*rotation-1.65;
rotIncr = 0.01753*rotation-1.65;

// sets light target's x and y. Point sthe light in the right direction.
xrot = 2 * cos (rotIncr);
yrot = 2 * sin (rotIncr);



// switch to turn light on and off
if (keyboard_check_pressed(ord(lightSwitch))){
    active = !active;
}


// show light if active
if (active){ 
    // return light_id in realtime using SearchForLightId() 
    // so objects don't choose the same slot and only one shows up
    NM_set_SpotLight(SearchForLightId(), x, y, lightCol, intensity, 
        lightDistance, x+ xrot, y - yrot, lightCutoff);
              
}

// deletes light data when light is no longer on, using light_id
else if (!active){

    if(light_id != -1){
        // reset light array indexes that the object was holding back to -1
        DeleteLight(light_id);
    }
    light_id = -1
    lightIdFound = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
draw_text(room_width - 196, room_height - 96,"Rotation:" + string(rotation))

// draw xrot and yrot
draw_text(room_width - 164, room_height - 64,"Xrot:" + string(xrot div 45))
draw_text(room_width - 164, room_height - 32,"Yrot:" + string(yrot div 45))


*/
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
